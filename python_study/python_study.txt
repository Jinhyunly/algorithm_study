------------------------------------------------------
- rstrip() 라이브러리

import sys

sys.stdin.readline().rstrip()
개행문자 삭제
------------------------------------------------------

큐

from collections import deque
queue = deque()

------------------------------------------------------
stack = []

if not stack  #스텍에 값이 존재하지 않는다
  pirnt("empty")

------------------------------------------------------


#행(Row)이 3개인 2차원 리스트로 인접 리스트 표현
graph =[[] for  _ in range(3)]


------------------------------------------------------

import sys

list = []
for i in range(9):
   list.append(int(sys.stdin.readline()))

#위에 코드와 동일하다 (for문을 list comprehension 으로 작성한 코드)
list = [int(sys.stdin.readline()) for _ in range(9)]


-----------------------------------------------------


print("{:.3f}%".format(12.1235)) # 12.123%

print("{:.3f}".format(12.1235))  # 12.123



---------------------------------------------------

#소수구하기

import sys

m, n = map(int, sys.stdin.readline().split())

def is_prime_num(n):
  for i in range(2, n):
    if n%i == 0:
      return False
  return True

for i in range(m, n+1):
  if is_prime_num(i):
    print(i)


---------------------------------------------------

ord(문자): 아스키 코드를 반환해준다
chr(숫자):  숫자에 맞는 아스키 코드를 반환한다.

print(chr(65)) #A
print(ord("A")) #65


---------------------------------------------------

# find 함수

print("abc".find("b"))  #문자열에 해당 문자가 있을 경우 문자열의 인덱스를 반환 값: 1
print("abc".find("f"))  #문자열에 해당 문자가 없을 경우 -1을 반환

-------------------------------------------------
# [::-1] 역순

tmp = "123"
print(tmp[::-1])
print(int(tmp[::-1]))

-------------------------------------------------
#문자열 인덱스 부터 출력

str1 = "abcdefg"
print(str1[1:-2]) # bcdefg
print(str1[1:-2]) # bcde
print(str1[::-1]) # 역순

-------------------------------------------------

#리스트에서 리스트 빼기 (완주하지못한 마라톤 선수(프로그래머스 참고))

import collections

participant = ["a", "b", "c", "a"]
completion = ["a", "b", "b"]

answer = collections.Counter(participant) - collections.Counter(completion)
print(list(answer.keys()))

print(list(answer.keys())[0])
print(list(answer.keys())[1])

# 결과값 
# ['a', 'c']
# a
# b

-------------------------------------------------

from bisect import bisect_left, bisect_right

a = [1, 2, 4, 4, 8]
x = 4
# bisect_left(a, x) : 정렬된 순서를 유지하면서 배열 a에 x를 삽일할 가장 왼쪽 인덱스를 반환
# bisect_right(a, x) : 정렬된 순서를 유지하면서 배열 a에 x를 삽일할 가장 오른쪽 인덱스를 반환 
print(bisect_left(a, x)) #2
print(bisect_right(a, x)) #4

-------------------------------------------------

from bisect import bisect_left, bisect_right

# 값이 [left_value, right_value]인 데이터의 개수를 반환하는 함수
def count_by_range(a, left_value, right_value):
  right_index = bisect_right(a, right_value)
  left_index = bisect_left(a, left_value)
  return right_index - left_index

# 배열 선언
a = [1,2,3,3,3,3,4,4,8,9]

# 값이 4인 데이터 개수 출력
print(count_by_range(a, 4, 4))
# 값이 [-1, 3] 범위에 있는 데이터 개수 출력
print(count_by_range(a, -1, 3))


-------------------------------------------------

# 리스트 데이터 2개 중 첫번째값 정렬

listA = []
listA.append((20, "test1"))
listA.append((20, "abc1"))
listA.append((19, "zz1"))

listA.sort(key = lambda x : x[0])

for data in listA:
  print(data[0], data[1])

#19 zz1
#20 test1
#20 abc1

-------------------------------------------------


import itertools

# permutations(순열) : n 개 중 r 개를 골라 순서를 정해 나열하는 가짓수
# 순열은 순서를 고려한다
# (A, B)와 (B, A)는 다른 것으로 취급

arr = ['A', 'B', 'C']
nPr = itertools.permutations(arr, 2)
print(list(nPr))

#결과 : [('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'C'), ('C', 'A'), ('C', 'B')]


# combinations(조합) : n개 중에서 r개 취한 조합
# 순서를 고려하지 않음
# (A, B)와 (B, A)는 같은 것으로 취급

arr = ['A', 'B', 'C']
nCr = itertools.combinations(arr, 2)
print(list(nCr))

#결과 : [('A', 'B'), ('A', 'C'), ('B', 'C')]


-------------------------------------------------
# key, value

id_list = ["muzi", "frodo", "apeach", "neo"]
reports = {id:0 for id in id_list}
reports["frodo"] += 1
print(reports) 
# 결과 : {'muzi': 0, 'frodo': 1, 'apeach': 0, 'neo': 0}

-------------------------------------------------
# 리스트 복사(복사당한 리스트에 영향 x)

priorities = [2, 1, 3, 2]
arr_value = priorities.copy()

priorities.pop(0)

print(arr_value) #복사당한 리스트에 영향 x
print(priorities)
# [2, 1, 3, 2]
# [1, 3, 2]

-------------------------------------------------


#y좌표로 오름차순, 같다면 x오름차순
arr.sort(key=lambda x:(x[1], x[0]))

---------------------------------------------------

라이브러리 공부
bfs,dfs 다시공부

-------------------------------------------------